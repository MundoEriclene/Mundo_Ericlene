import datetime
from dateutil import parser
from pydantic import BaseModel, ValidationError, validator
from email_validator import validate_email, EmailNotValidError


# ‚úÖ Classe de valida√ß√£o de dados usando Pydantic
class SonoData(BaseModel):
    horario_real: str
    qualidade_sono: int
    justificativa: str

    @validator("horario_real")
    def validar_horario_real(cls, value):
        try:
            parser.parse(value)
            return value
        except ValueError:
            raise ValueError("‚ùå Hor√°rio real de sono inv√°lido.")

    @validator("qualidade_sono")
    def validar_qualidade(cls, value):
        if 0 <= value <= 100:
            return value
        raise ValueError("‚ùå A qualidade do sono deve estar entre 0 e 100.")

    @validator("justificativa")
    def validar_justificativa(cls, value):
        if not value.strip():
            raise ValueError("‚ùå A justificativa n√£o pode estar vazia.")
        return value


# üïí Fun√ß√£o para calcular a dura√ß√£o do sono
def calcular_duracao_sono(horario_inicio: str, horario_fim: str) -> float:
    try:
        inicio = parser.parse(horario_inicio)
        fim = parser.parse(horario_fim)
        duracao = (fim - inicio).total_seconds() / 3600  # Converter para horas
        return max(0, duracao)  # Garante que a dura√ß√£o n√£o seja negativa
    except ValueError:
        return 0.0


# üìä Fun√ß√£o para calcular a pontua√ß√£o de sa√∫de com base no sono
def calcular_saude_percentual(qualidade_sono: int, horas_dormidas: float) -> float:
    ideal_horas = 8
    penalidade = abs(ideal_horas - horas_dormidas) * 5  # Penalidade de 5% por hora fora do ideal
    saude = max(0, min(100, qualidade_sono - penalidade))
    return round(saude, 2)


# ‚è≥ Fun√ß√£o para estimar a expectativa de vida com base no sono
def estimar_expectativa_vida(saude_percentual: float) -> float:
    vida_maxima = 85  # Expectativa m√©dia de vida em anos
    reducao = (100 - saude_percentual) * 0.2  # Reduz 0.2 anos por ponto percentual abaixo de 100%
    expectativa = max(0, vida_maxima - reducao)
    return round(expectativa, 1)


# ‚úâÔ∏è Fun√ß√£o para validar e-mails
def validar_email(email: str) -> bool:
    try:
        validate_email(email)
        return True
    except EmailNotValidError:
        return False


# üìù Fun√ß√£o para formatar relat√≥rio de sono
def formatar_relatorio_sono(horas_dormidas, qualidade, saude_percentual, expectativa_vida):
    return f"""
    üí§ Relat√≥rio de Sono - Mundo Ericlene üí§

    ‚úÖ Horas dormidas: {horas_dormidas:.2f} horas
    ‚úÖ Qualidade do sono: {qualidade}%
    ‚úÖ Sa√∫de geral com base no sono: {saude_percentual}%
    ‚úÖ Expectativa de vida estimada: {expectativa_vida} anos

    üîç Recomenda√ß√µes:
    - Tente manter uma rotina de sono consistente.
    - Evite cafe√≠na antes de dormir.
    - Pratique exerc√≠cios regularmente para melhorar a qualidade do sono.

    üåü Cuide-se e mantenha h√°bitos saud√°veis!
    """


# üìÖ Fun√ß√£o para obter o hor√°rio atual formatado
def horario_atual_formatado() -> str:
    return datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
