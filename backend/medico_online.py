import openai
from app.send_emal_saude import enviar_email_relatorio  # Corrigido o nome da fun√ß√£o
import os

# Configurar API da OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

if not openai.api_key:
    raise ValueError("‚ùå A chave da API da OpenAI n√£o est√° configurada. Verifique suas vari√°veis de ambiente.")

def avaliar_sono_openai(dados_sono):
    # Garantir que todos os dados necess√°rios est√£o presentes
    horario_dormir = dados_sono.get('horarioDormir', 'N√£o informado')
    horario_acordar = dados_sono.get('horarioAcordar', 'N√£o informado')
    qualidade_sono = dados_sono.get('qualidadeSono', 'N√£o informado')
    justificativa = dados_sono.get('justificativaSono', 'N√£o informado')

    prompt = f"""
    üí§ Avalia√ß√£o de Sono Personalizada üí§

    Dados fornecidos:
    - Hor√°rio de dormir: {horario_dormir}
    - Hor√°rio de acordar: {horario_acordar}
    - Qualidade do sono (0-100): {qualidade_sono}
    - Justificativa: {justificativa}

    Baseando-se nesses dados, forne√ßa um parecer m√©dico personalizado sobre a qualidade do sono, poss√≠veis causas para a pontua√ß√£o indicada e recomenda√ß√µes baseadas em estudos cient√≠ficos sobre os efeitos do sono de menos de 8 horas ou mais de 9 horas.
    """

    try:
        resposta = openai.Completion.create(
            model="text-davinci-003",  # Pode ser atualizado para "gpt-3.5-turbo" com ajustes na API
            prompt=prompt,
            max_tokens=500
        )

        avaliacao = resposta.choices[0].text.strip()

        # Enviar a avalia√ß√£o por e-mail
        enviar_email_relatorio(
            assunto="ü©∫ Avalia√ß√£o M√©dica Personalizada do Sono",
            mensagem=avaliacao
        )
        print("‚úÖ Avalia√ß√£o enviada por e-mail com sucesso.")

    except openai.error.OpenAIError as e:
        print(f"‚ùå Erro na API da OpenAI: {e}")

    except Exception as e:
        print(f"‚ùå Erro inesperado ao avaliar o sono: {e}")
